#!/usr/bin/env python2.7

"""
A lightweight compile and simulate script
"""

########################################################################################
# Globals

__version__       = '0.0'
__author__        = "Brian Hunter"
__email__         = 'brian.hunter@cavium.com'


# The names of all the library files that will be imported
Libraries = ('project', 'tb')

# Command-Line actions
CmdLineActions = None

#######################################################################################
# Imports
import os
# import subprocess
import sys
import argparse
import logging
import logging
import cn_logging
import gvars
import sge_tools as sge

########################################################################################
def setup_globals():
    """
    Set up the gvars.Vars dictionary with imported information from project and the local tb.py
    Set up the CmdLineActions dictionary
    """

    def import_lib(mod_name):
        try:
            lib = __import__(mod_name)
        except ImportError:
            gvars.Log.critical("%s.py file not found! Ensure that your PYTHONPATH variable includes '.'" % mod_name)
            sys.exit(253)

        lib_dict = lib.__dict__
        for key in gvars.Vars:
            if key in lib_dict:
                try:
                    if type(gvars.Vars[key]) == str:
                        gvars.Vars[key] = gvars.Vars[key] + ' ' + lib_dict[key]
                    else:
                        gvars.Vars[key] += lib_dict[key]
                except:
                    gvars.Vars[key] = lib_dict[key]

    map(import_lib, Libraries)

    gvars.Vars['VKITS_DIR'] = '../vkits'
    gvars.Vars['UVM_DIR']   = os.path.join(gvars.Vars['VKITS_DIR'], 'uvm/%s' % gvars.Vars['UVM_REV'])
    gvars.Vars['UVM_FLIST'] = os.path.join(gvars.Vars['UVM_DIR'], 'uvm.flist')

    for key in gvars.Vars:
        if gvars.Vars[key] is None and key not in gvars.OptionalKeys:
            gvars.Log.error("%s is not defined in any of %s." % (key, ','.join(["%s.py" % it for it in Libraries])))
            sys.exit(1)

########################################################################################
def parse_args():
    """
    Parse Command-Line
    """

    global CmdLineActions

    gvars.Log = cn_logging.getLogger('gogo.log')
    gvars.Log.setLevel(logging.INFO)

    # create the handler
    console = logging.StreamHandler()
    console.setFormatter(cn_logging.formatter)
    gvars.Log.addHandler(console)

    sge.Log = gvars.Log

    CmdLineActions = {'b'       : 'build',
                      'build'   : 'build',
                      'bld'     : 'build',
                      'c'       : 'clean',
                      'cln'     : 'clean',
                      'clean'   : 'clean',
                      's'       : 'simulate',
                      'sim'     : 'simulate',
                      'simu'    : 'simulate',
                      'simulate': 'simulate'}

    p = argparse.ArgumentParser(
        prog='gogo',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage="%(prog)s [actions] [options]",
        version=("%(prog)s v"+__version__),
        description=__doc__)

    p.add_argument('actions',        action='store', nargs='*',  help="Any one of (b)uild, (s)imulate, or (c)lean")

    p.add_argument('--test', '-t',   action='store',             default='basic', help="Specify UVM test name [default:basic]")
    p.add_argument('--dir',  '-d',   action='store',             default=None,    help="Specify alternate directory for results.")
    p.add_argument('--verb', '-V',   action='store',             default=None,    help="Specify UVM Verbosity.")

    p.add_argument('--simopts',      action='store',             default=None,    help="Add simulation opts as a string to simulator command-line.")
    p.add_argument('--cmpopts',      action='store',             default=None,    help="Add compilation opts as a string to compiler command-line.")
    p.add_argument('--seed', '-s',   action='store', type=int,   default=1,       help="Run with the given seed (0 for a random seed).")

    p.add_argument('--topo',         action='store', type=int,   default=None,    help="Print UVM topology at this depth.")
    p.add_argument('--wdog',         action='store', type=int,   default=None,    help="Time (in ns) at which the testbench will watchdog timeout.")
    p.add_argument('--gui',  '-g',   action='store_true',        default=False,   help="Run DVE in GUI mode.")
    p.add_argument('--wave', '-w',   action='store_true',        default=False,   help="Dump waves to VPD file.")
    p.add_argument('--svfcov',       action='store_true',        default=False,   help="Run with SV Functional Coverage")

    gvars.Options = p.parse_args()

    for action in gvars.Options.actions:
        if action not in CmdLineActions.keys():
            gvars.Log.critical("Unknown action: %s" % action)
            sys.exit(252)

    if gvars.Options.actions == []:
        gvars.Options.actions = ['bld', 'sim']

########################################################################################
def clean():
    """
    Remove unwanted directories and files.
    """

    from shutil import rmtree

    gvars.Log.info("> Cleaning...")
    for dname in gvars.Vars['CLEAN_DIRS']:
        try:
            rmtree(dname)
            gvars.Log.info("++ Removed dir %s" % dname)
        except:
            pass

    for fname in gvars.Vars['CLEAN_FILES']:
        try:
            os.remove(fname)
            gvars.Log.info("++ Removed file %s" % fname)
        except:
            pass

########################################################################################
def get_runmod_cmd(modules):
    if gvars.Vars['USE_RUNMOD']:
        return "runmod -m %s" % (' -m '.join(modules))
    else:
        return ''

########################################################################################
if __name__ == '__main__':
    parse_args()
    setup_globals()

    try:
        actions = [CmdLineActions[action] for action in gvars.Options.actions]

        if 'clean' in actions:
            clean()
        if 'build' in actions:
            import build_action
            build = build_action.BuildAction()
            build.run()
        if 'simulate' in actions:
            import simulate_action
            sim = simulate_action.SimulateAction(gvars.Options.test)
            sim.run()
    except KeyboardInterrupt:
        gvars.Log.critical("Exiting due to Ctrl-C.")
        sys.exit(255)

    # if we get here, we must have passed
    logging.shutdown()
    sys.exit(0)

