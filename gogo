#!/usr/bin/env python2.7

"""
A lightweight compile and simulate script.

(v)log     : Build verilog executable.
(s)imulate : Run simulation.
(c)lean    : Remove all generated files.


"""

__version__       = '0.0.1'
__author__        = "Brian Hunter"
__email__         = 'brian.hunter@cavium.com'

#######################################################################################
# Imports
import argparse
import logging
import cn_logging
import gvars
import sge_tools as sge

########################################################################################
# Globals

Log = None

########################################################################################
def parse_args():
    """
    Parse Command-Line and return the gadgets to be run as a list of strings.
    """

    global Log

    gvars.Log = cn_logging.getLogger('gogo.log')
    gvars.Log.setLevel(logging.INFO)

    # create the handler
    console = logging.StreamHandler()
    console.setFormatter(cn_logging.formatter)
    gvars.Log.addHandler(console)

    Log = gvars.Log
    sge.Log = gvars.Log

    p = argparse.ArgumentParser(
        prog='gogo',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage="%(prog)s [gadgets] [options]",
        version=("%(prog)s v"+__version__),
        description=__doc__)

    p.add_argument('gadgets',        action='store', nargs='*',  help="Any one of (v)log, (s)imulate, (c)lean, or help")

    p.add_argument('--test', '-t',   action='store',             default='basic', help="Specify UVM test name [default:basic]")
    p.add_argument('--dir',  '-d',   action='store',             default=None,    help="Specify alternate directory for results.")
    p.add_argument('--verb', '-V',   action='store',             default=0,       help="Specify UVM Verbosity.")
    p.add_argument('--tb',           action='store',             default='tb',    help="Specify a different tb.py configuration file.")
    p.add_argument('--interactive',  action='store_true',        default=False,   help="Run the simulation interactively.")

    p.add_argument('--simopts',      action='store',             default=None,    help="Add simulation opts as a string to simulator command-line.")
    p.add_argument('--cmpopts',      action='store',             default=None,    help="Add compilation opts as a string to compiler command-line.")
    p.add_argument('--seed', '-s',   action='store', type=int,   default=1,       help="Run with the given seed (0 for a random seed).")

    p.add_argument('--topo',         action='store', type=int,   default=None,    help="Print UVM topology at this depth.")
    p.add_argument('--wdog',         action='store', type=int,   default=None,    help="Time (in ns) at which the testbench will watchdog timeout.")
    p.add_argument('--gui',  '-g',   action='store_true',        default=False,   help="Run DVE in GUI mode.")
    p.add_argument('--wave', '-w',   action='store', type=str,   default=False,   help="Dump waves to VPD file.",
        choices=('vpd', 'fsdb'))
    p.add_argument('--svfcov',       action='store_true',        default=False,   help="Run with SV Functional Coverage")

    p.add_argument('--dbg',          action='store_true',        default=False,   help="Used for debugging gogo.")
    p.add_argument('--noflush',      action='store_true',        default=False,   help="Permit turd files to stay.")

    gvars.Options = p.parse_args()

    gadgets_to_run = gvars.Options.gadgets
    shortcuts = {
                 'c'        : 'clean',
                 'cln'      : 'clean',
                 'clean'    : 'clean',
                 'b'        : 'build',
                 'build'    : 'build',
                 'bld'      : 'build',
                 'v'        : 'vlog',
                 'vlog'     : 'vlog',
                 's'        : 'simulate',
                 'sim'      : 'simulate',
                 'simu'     : 'simulate',
                 'simulate' : 'simulate',
                 'help'     : 'help',
                 'print_deps' : 'print_deps',
                 }

    for gadget in gadgets_to_run:
        if gadget not in shortcuts.keys():
            Log.critical("Unknown gadget: %s" % gadget)

    # Shortcut: just running 'gogo' will vlog and simulate
    if gadgets_to_run == []:
        gadgets_to_run = ['build', 'vlog', 'sim']

    if gvars.Options.dbg:
        gvars.Log.setLevel(logging.DEBUG)

    return [shortcuts[gadget] for gadget in gadgets_to_run]

########################################################################################
if __name__ == '__main__':
    import schedule

    gadgets_to_run = parse_args()
    gvars.setup_globals()

    from gadget import GadgetFailed # note: this import must come after setup_globals

    Log.info("Welcome to gogo v%s" % __version__)

    if 'help' in gadgets_to_run:
        import sys
        gvars.print_keys()
        sys.exit(0)

    # Test Code to print dependencies
    if 'print_deps' in gadgets_to_run:
        import sys, pymake
        srcs = gvars.get_all_sources() 
        # print(srcs)
        answer = pymake.get_extreme_mtime(srcs, old=False, get_file=True)
        print("Latest=%s" % answer[1])
        sys.exit(1)

    try:
        if 'clean' in gadgets_to_run:
            import gadgets.clean
            schedule.add_gadget(gadgets.clean.CleanGadget())

        if 'build' in gadgets_to_run:
            import gadgets.build
            schedule.add_gadget(gadgets.build.BuildGadget())

        if 'vlog' in gadgets_to_run:
            import gadgets.vlog
            schedule.add_gadget(gadgets.vlog.VlogGadget())

        if 'simulate' in gadgets_to_run:
            import gadgets.simulate
            schedule.add_gadget(gadgets.simulate.SimulateGadget())

        # turd files are flushed unless otherwise stated
        if not gvars.Options.noflush:
            import gadgets.flush
            schedule.add_gadget(gadgets.flush.FlushGadget())

        schedule.set_schedule(gadgets_to_run)
        schedule.run_schedule()

    except KeyboardInterrupt:
        sge.killAll()
        Log.critical("Exiting due to Ctrl-C.")

    except GadgetFailed as inst:
        Log.critical("%s Failed! Cannot Continue." % inst.args[0])

    # if we get here, we must have passed
    logging.shutdown()
