#!/usr/bin/env python2.7

"""
A lightweight compile and simulate script.

(v)log     : Build verilog executable.
(s)imulate : Run simulation.
(c)lean    : Remove all generated files.


"""

__version__       = '0.0.4'
__author__        = "Brian Hunter"
__email__         = 'brian.hunter@cavium.com'

#######################################################################################
# Imports
import argparse
import logging
import cn_logging
import gvars
import sge_tools as sge
import os.path

########################################################################################
# Globals

Log = None

########################################################################################
def parse_args():
    """
    Parse Command-Line and return the gadgets to be run as a list of strings.
    """

    global Log

    gvars.Log = cn_logging.getLogger('gogo.log')
    gvars.Log.setLevel(logging.INFO)

    # create the handler
    console = logging.StreamHandler()
    console.setFormatter(cn_logging.formatter)
    gvars.Log.addHandler(console)

    Log = gvars.Log
    sge.Log = gvars.Log

    p = argparse.ArgumentParser(
        prog='gogo',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage="%(prog)s [gadgets] [options]",
        version=("%(prog)s v"+__version__),
        description=__doc__)

    p.add_argument('gadgets',        action='store', nargs='*',  help="Any one of (v)log, (s)imulate, (c)lean, or help")

    p.add_argument('--test', '-t',   action='store',             default='basic', help="Specify UVM test name [default:basic]")
    p.add_argument('--dir',  '-d',   action='store',             default=None,    help="Specify alternate directory for results.")
    p.add_argument('--verb', '-V',   action='store',             default=0,       help="Specify UVM Verbosity.")
    p.add_argument('--tb',           action='store',             default='tb',    help="Specify a different tb.py configuration file.")
    p.add_argument('--part', '-p',   action='store',             default='auto',  help="When 'auto', gogo generates the partition configuration from settings; when 'off', compile without partitions; else specify your own configuration file.")
    p.add_argument('--interactive',  action='store_true',        default=False,   help="Run the simulation interactively.")

    p.add_argument('--simopts',      action='store',             default=None,    help="Add simulation opts as a string to simulator command-line.")
    p.add_argument('--cmpopts',      action='store',             default=None,    help="Add compilation opts as a string to compiler command-line.")
    p.add_argument('--seed', '-s',   action='store', type=int,   default=1,       help="Run with the given seed (0 for a random seed).")

    p.add_argument('--topo',         action='store', type=int,   default=None,    help="Print UVM topology at this depth.")
    p.add_argument('--wdog',         action='store', type=int,   default=None,    help="Time (in ns) at which the testbench will watchdog timeout.")
    p.add_argument('--gui',  '-g',   action='store_true',        default=False,   help="Run DVE in GUI mode.")
    p.add_argument('--wave', '-w',   action='store', type=str,   default=False,   help="Dump waves to VPD file.",
        choices=('vpd', 'fsdb'))
    p.add_argument('--svfcov',       action='store_true',        default=False,   help="Run with SV Functional Coverage")

    p.add_argument('--dbg',          action='store_true',        default=False,   help="Used for debugging gogo.")
    p.add_argument('--noflush',      action='store_true',        default=False,   help="Permit turd files to stay.")

    gvars.Options = p.parse_args()

    gadgets_to_run = gvars.Options.gadgets
    shortcuts = {
                 'c'        : 'clean',
                 'cln'      : 'clean',
                 'clean'    : 'clean',
                 'b'        : 'build',
                 'build'    : 'build',
                 'bld'      : 'build',
                 'v'        : 'vlog',
                 'vlog'     : 'vlog',
                 's'        : 'simulate',
                 'sim'      : 'simulate',
                 'simu'     : 'simulate',
                 'simulate' : 'simulate',
                 'help'     : 'help',
                 'print_deps' : 'print_deps',
                 }

    for gadget in gadgets_to_run:
        if gadget not in shortcuts.keys():
            Log.critical("Unknown gadget: %s" % gadget)

    # Shortcut: just running 'gogo' will vlog and simulate
    if gadgets_to_run == []:
        gadgets_to_run = ['build', 'vlog', 'sim']

    if gvars.Options.dbg:
        gvars.Log.setLevel(logging.DEBUG)

    if gvars.Options.part not in ('auto', 'off') and not os.path.exists(gvars.Options.part):
        Log.critical("Partition configuration file '%s' does not exist." % gvars.Options.part)

    return [shortcuts[gadget] for gadget in gadgets_to_run]

########################################################################################
def setup_globals():
    """
    Set up the variables in gvars with imported information from project and the local tb.py
    """

    import var_type
    from area_utils import calcRootDir
    global gvars

    var_type.Log = gvars.Log
    gvars.RootDir = calcRootDir()
    # The names of all the library files that will be imported
    libraries = ('project', gvars.Options.tb)

    def import_lib(mod_name):
        try:
            __import__(mod_name)
        except ImportError:
            import sys
            path_str = 'PYTHONPATH = '
            for p in sys.path:
                path_str += '\n\t%s' % p
            Log.warning("'%s.py' file not found! Modify your PYTHONPATH?\n%s" % (mod_name, path_str))
            raise

    map(import_lib, libraries)

    from vkit import Vkit
    gvars.Vkits = [Vkit(it) for it in gvars.TB.VKITS]
    uvm_vkit = Vkit('uvm')
    gvars.Vkits.insert(0, uvm_vkit)

    try:
        gvars.StaticVkits = [it for it in gvars.Vkits if it.name in gvars.TB.STATIC_VKITS]
    except AttributeError:
        Log.critical("A Vkit below has no name:\n%s" % gvars.Vkits)

########################################################################################
if __name__ == '__main__':
    import schedule

    gadgets_to_run = parse_args()
    setup_globals()

    from gadget import GadgetFailed # note: this import must come after setup_globals

    Log.info("Welcome to gogo v%s" % __version__)

    # if 'help' in gadgets_to_run:
    #     import sys
    #     gvars.print_keys()
    #     sys.exit(0)

    # # Test Code to print dependencies
    # if 'print_deps' in gadgets_to_run:
    #     import sys, pymake
    #     srcs = gvars.get_all_sources() 
    #     # print(srcs)
    #     answer = pymake.get_extreme_mtime(srcs, old=False, get_file=True)
    #     print("Latest=%s" % answer[1])
    #     sys.exit(1)

    try:
        if 'clean' in gadgets_to_run:
            import gadgets.clean
            schedule.add_gadget(gadgets.clean.CleanGadget())

        if 'build' in gadgets_to_run:
            import gadgets.build
            schedule.add_gadget(gadgets.build.BuildGadget())

        if 'vlog' in gadgets_to_run:
            import gadgets.vlog
            schedule.add_gadget(gadgets.vlog.VlogGadget())

        if 'simulate' in gadgets_to_run:
            import gadgets.simulate
            schedule.add_gadget(gadgets.simulate.SimulateGadget())

        # turd files are flushed unless otherwise stated
        if not gvars.Options.noflush:
            import gadgets.flush
            schedule.add_gadget(gadgets.flush.FlushGadget())

        schedule.set_schedule(gadgets_to_run)
        schedule.run_schedule()

    except KeyboardInterrupt:
        sge.killAll()
        Log.critical("Exiting due to Ctrl-C.")

    except GadgetFailed as inst:
        Log.critical("%s Failed! Cannot Continue." % inst.args[0])

    # if we get here, we must have passed
    logging.shutdown()
