#!/usr/bin/env python2.7

"""
A lightweight compile and simulate script
"""

########################################################################################
# Globals

__version__       = '0.0'
__author__        = "Brian Hunter"
__email__         = 'brian.hunter@cavium.com'


#######################################################################################
# Imports
import argparse
import logging
import cn_logging
import gvars
import sge_tools as sge

Log = None

########################################################################################
def parse_args():
    """
    Parse Command-Line. Return the actions to be run
    """

    global Log

    gvars.Log = cn_logging.getLogger('gogo.log')
    gvars.Log.setLevel(logging.INFO)

    # create the handler
    console = logging.StreamHandler()
    console.setFormatter(cn_logging.formatter)
    gvars.Log.addHandler(console)

    Log = gvars.Log
    sge.Log = gvars.Log

    p = argparse.ArgumentParser(
        prog='gogo',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage="%(prog)s [actions] [options]",
        version=("%(prog)s v"+__version__),
        description=__doc__)

    p.add_argument('actions',        action='store', nargs='*',  help="Any one of (b)uild, (s)imulate, or (c)lean")

    p.add_argument('--test', '-t',   action='store',             default='basic', help="Specify UVM test name [default:basic]")
    p.add_argument('--dir',  '-d',   action='store',             default=None,    help="Specify alternate directory for results.")
    p.add_argument('--verb', '-V',   action='store',             default=None,    help="Specify UVM Verbosity.")

    p.add_argument('--simopts',      action='store',             default=None,    help="Add simulation opts as a string to simulator command-line.")
    p.add_argument('--cmpopts',      action='store',             default=None,    help="Add compilation opts as a string to compiler command-line.")
    p.add_argument('--seed', '-s',   action='store', type=int,   default=1,       help="Run with the given seed (0 for a random seed).")

    p.add_argument('--topo',         action='store', type=int,   default=None,    help="Print UVM topology at this depth.")
    p.add_argument('--wdog',         action='store', type=int,   default=None,    help="Time (in ns) at which the testbench will watchdog timeout.")
    p.add_argument('--gui',  '-g',   action='store_true',        default=False,   help="Run DVE in GUI mode.")
    p.add_argument('--wave', '-w',   action='store_true',        default=False,   help="Dump waves to VPD file.")
    p.add_argument('--svfcov',       action='store_true',        default=False,   help="Run with SV Functional Coverage")

    gvars.Options = p.parse_args()

    actions = gvars.Options.actions
    shortcuts = {
                 'c'        : 'clean',
                 'cln'      : 'clean',
                 'clean'    : 'clean',
                 'partition': 'partition',
                 'par'      : 'partition',
                 'p'        : 'partition',
                 'b'        : 'build',
                 'build'    : 'build',
                 'bld'      : 'build',
                 's'        : 'simulate',
                 'sim'      : 'simulate',
                 'simu'     : 'simulate',
                 'simulate' : 'simulate',
                 }

    for action in actions:
        if action not in shortcuts.keys():
            Log.critical("Unknown action: %s" % action)

    # Shortcut: just running 'gogo' will build and simulate
    if actions == []:
        actions = ['bld', 'sim']

    return [shortcuts[action] for action in actions]

########################################################################################
if __name__ == '__main__':
    actions = parse_args()
    gvars.setup_globals()

    from action import ActionFailed

    try:
        if 'clean' in actions:
            import clean_action
            job = clean_action.CleanAction()
            job.run()
        if 'partition' in actions:
            import partition_action
            job = partition_action.PartitionAction()
            job.run()
        if 'build' in actions:
            import build_action
            job = build_action.BuildAction()
            job.run()
        if 'simulate' in actions:
            import simulate_action
            job = simulate_action.SimulateAction()
            job.run()
    except KeyboardInterrupt:
        Log.critical("Exiting due to Ctrl-C.")

    except ActionFailed as inst:
        Log.critical("%s Failed! Cannot Continue." % inst.args[0])

    # if we get here, we must have passed
    logging.shutdown()

